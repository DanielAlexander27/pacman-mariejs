Jump main

initialPos, HEX F00
wallPos1, HEX FFF
wallPos2, HEX F04
pacman_pos, HEX F0A

main, Load PAC-MAN_COLOR
StoreI pacman_pos

Load INKY_COLOR
StoreI initialPos

Load PARED_COLOR
StoreI wallPos1
StoreI wallPos2

Load initialPos
Store dP.initialPos
Load INKY_COLOR
Store dP.ghostColor
JnS detectPacman(initialPos;ghostColor)
Load dP.result
Output

Halt

// Start - detectPacman()
// It returns the orientation where the ghost should go (up, down, left or right)
// by returning -16, +16, -1 or +1, respectively. It returns 0 if pacman is not detected.
detectPacman(initialPos;ghostColor), HEX 000
	Clear
	Store dP.result

	// Check if pacman and ghost are in the same column
	Load +16
	Store mod.divisor
	Load pacman_pos
	Store mod.dividend
	Jns mod(dividend;divsor)
	Load mod.result
	Store dP.temp

	Load dP.initialPos
	Store mod.dividend
	JnS mod(dividend;divsor)
	Load mod.result
	Subt dP.temp
	SkipCond 0C00
		Jump dP.validateUp
	// Check if pacman and ghost are in the same row
	Load +16
	Store division.divisor
	Load pacman_pos
	Store division.dividend
	JnS division(dividend;divsor)
	Load division.result
	Store dP.temp

	Load dP.initialPos
	Store division.dividend
	JnS division(dividend;divsor)
	Load division.result
	Subt dP.temp
	SkipCond 0400
		Jump dP.return
	Jump dP.validateRight

	// Loop to go tho the right
	dP.validateRight, Load dP.initialPos
	Store dP.prevPos
	Add +1
	Store dP.currentPos
	Load +1
	Store dP.addend
	JnS dP.while
			
	// Loop to go to the left
	dP.validateLeft, Load dP.initialPos
	Store dP.prevPos
	Subt +1
	Store dP.currentPos
	Load -1
	Store dP.addend
	JnS dP.while
			
	Jump dP.return

	// Loop to go up
	dP.validateUp, Load dP.initialPos
	Store dP.prevPos
	Subt +16
	Store dP.currentPos
	Load -16
	Store dP.addend
	JnS dP.while

	// Loop to go down
	dp.validateDown, Load dP.initialPos
	Store dP.prevPos
	Add +16
	Store dP.currentPos
	Load +16
	Store dP.addend
	JnS dP.while
	Jump dP.return

	dP.while, HEX 000
		dP.startWhile, Load dP.prevPos
		Store vP.currentPos
		Load dP.currentPos
		Store vP.posToCheck

		JnS validatePos(currentPos;posToCheck)
		Load vP.result
		SkipCond 000
			Jump dP.checkGhost
		Jump dp.exitWhile

		dP.checkGhost, Load vP.result
			Subt dP.initialPos
			SkipCond 0C00
				Jump dp.exitWhile
		// check pac-man
		LoadI vP.result
		Subt PAC-MAN_COLOR
		SkipCond 400
			Jump dp.continueWhile
		Load dP.addend
		Jump dp.storeResult
				
		dp.continueWhile, Load vP.result
			Store dP.prevPos
			Add dP.addend
			Store dP.currentPos
			Jump dP.startWhile
				
		dp.exitWhile, JumpI dP.while	

	dp.storeResult, Store dP.result
	dP.return, JumpI detectPacman(initialPos;ghostColor)

	// Variables
	dP.temp, DEC 0
	dP.initialPos, DEC 0
	dP.prevPos, DEC 0
	dP.currentPos, DEC 0
	dP.ghostColor, DEC -1
	dP.addend, DEC -1
	dP.result, DEC 0
// End - detectPacman()

// Start - validatePos()
// Returns -1 in case that the validation to go is invalid. Otherwise, it
// returns the position to go. It considers mirror effect. 
validatePos(currentPos;posToCheck), HEX 000
	Clear
	Store vP.result

	// Case where currentPos = OFFSET && posToCheck = (OFFSET - 1)
	vP.firstPosition, Load vP.currentPos
		Subt OFFSET
		SkipCond 0400
			Jump vP.lastPosition
		Load vP.currentPos
		Subt vP.posToCheck
		Subt +1
		SkipCond 0400	
			Jump vP.lastPosition
		Load +15
		Add OFFSET
		Store isWall.posToCheck
		JnS isWall(postToCheck)
		SkipCond 400
			Jump vP.wallDetected
		Load isWall.posToCheck
		Jump vP.storeResult

	// Case where currentPos = DISPLAY_END && posToCheck = (DISPLAY_END + 1)
	vP.lastPosition, Load vP.currentPos
		Subt DISPLAY_END
		SkipCond 0400
			Jump vP.validateUp
		Load vP.posToCheck
		Subt vP.currentPos
		Subt +1
		SkipCond 0400
			Jump vP.validateUp
		Load DISPLAY_END
		Subt +15
		Store isWall.posToCheck
		JnS isWall(postToCheck)
		SkipCond 400
			Jump vP.wallDetected
		Load isWall.posToCheck
		Jump vP.storeResult


	vP.validateUp, Load vP.posToCheck
        Subt OFFSET
		SkipCond 000
			Jump vP.validateDown
		Load vP.currentPos
		Add +240
		Store isWall.posToCheck
		JnS isWall(postToCheck)
		SkipCond 400
			Jump vP.wallDetected
		Load isWall.posToCheck
		Jump vP.storeResult

	vP.validateDown, Load DISPLAY_END
		Subt vP.posToCheck
		SkipCond 000
			Jump vP.validateRigthColumn
		Load vP.currentPos
		Subt +240
		Store isWall.posToCheck
		JnS isWall(postToCheck)
		SkipCond 400
			Jump vP.wallDetected
		Load isWall.posToCheck
		Jump vP.storeResult

	vP.validateRigthColumn, Load vP.posToCheck
		Subt OFFSET
		Store mod.dividend
		Load +16
		Store mod.divisor
		JnS mod(dividend;divsor)
		SkipCond 400
			Jump vP.validateLeftColumn
		Load vP.currentPos
		Subt vP.posToCheck
		Add +1
		SkipCond 400 // the difference should be by only 1
			Jump vP.validateLeftColumn
		Load vP.currentPos
		Subt +15
		Store isWall.posToCheck
		JnS isWall(postToCheck)
		SkipCond 400
			Jump vP.wallDetected
		Load isWall.posToCheck
		Jump vP.storeResult
		
	vP.validateLeftColumn, Load vP.posToCheck
		Subt OFFSET
		Store mod.dividend
		Load +16
		Store mod.divisor
		JnS mod(dividend;divsor)
		Subt +15
		SkipCond 400
			Jump vP.validatePosToCheck
		Load vP.posToCheck
		Subt vP.currentPos
		Add +1
		SkipCond 400 // the difference should be by only 1
			Jump vP.validatePosToCheck
		Load vP.currentPos
		Add +15
		Store isWall.posToCheck
		JnS isWall(postToCheck)
		SkipCond 400
			Jump vP.wallDetected
		Load isWall.posToCheck
		Jump vP.storeResult

	vP.validatePosToCheck, Load vP.posToCheck
	Store isWall.posToCheck
	JnS isWall(postToCheck)
	SkipCond 400
		Jump vP.wallDetected
	Load vP.posToCheck
	Jump vP.storeResult

	vP.storeResult, Store vP.result
		Jump vP.return
	
	vP.wallDetected, Load -1
		Store vP.result
		Jump vP.return

	vP.return, JumpI validatePos(currentPos;posToCheck)

	// Variables	
	vP.currentPos, HEX 0
	vP.posToCheck, HEX 0
	vP.result, HEX 0
// End - validatePos()

// Start - isWall()
// Return 1 if there is a wall and 0 if there is no wall.
isWall(postToCheck), hex 000
	Load -1
	Store isWall.result

	LoadI isWall.posToCheck
	Subt PARED_COLOR
	SkipCond 0C00
		Jump isWall.wallDetected
	Jump isWall.noWallDetected

	isWall.wallDetected, Load +1
		Store isWall.result
		Jump isWall.return
	
	isWall.noWallDetected, Load ZERO
		Store isWall.result

	isWall.return, JumpI isWall(postToCheck)
	
isWall.posToCheck, DEC 0
isWall.result, DEC -1

// End - isWall()

// Start - mod()
// Calculates mod operation between dividend and divisor.
mod(dividend;divsor), HEX 000
	Clear
	Store mod.result

	mod.while, Load mod.dividend
		Subt mod.divisor
		SkipCond 000
			Jump mod.while_cont
		Jump mod.return
		mod.while_cont, Store mod.dividend
			Jump mod.while

	mod.return, Load mod.dividend
		Store mod.result
		JumpI mod(dividend;divsor)

mod.dividend, DEC 0
mod.divisor, DEC 0
mod.result, DEC 0
// End - mod()

// Start - division()
// Calculates division between two integers (values should be positive)
// The result is truncated
division(dividend;divsor), HEX 000
	Clear
	Store division.result

	division.while, Load division.dividend
		Subt division.divisor
		SkipCond 000
			Jump division.while_cont
		Jump division.return
		division.while_cont, Store division.dividend
		Load division.result
		Add +1 
		Store division.result
		Jump division.while


	division.return, JumpI division(dividend;divsor)

	division.dividend, DEC 0
	division.divisor, DEC 0
	division.result, DEC 0
// End - division()

// Constants
OFFSET, HEX F00
DISPLAY_END, HEX FFF

ZERO, DEC 0
+1, DEC 1
-1, DEC -1
+15, DEC 15
-16, DEC -16
+16, DEC 16
+18, DEC 18
+240, DEC 240
+255, DEC 255
+31, DEC 31

INKY_COLOR, HEX 3FB
PAC-MAN_COLOR, HEX 7FE0
PARED_COLOR, HEX 421B
